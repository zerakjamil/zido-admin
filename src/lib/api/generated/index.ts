/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * ZidoBid Admin API
 * OpenAPI spec version: 0.1.0-local
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Admin,
  AuctionItem,
  Category,
  CreateAuctionItemRequest,
  CreateBannerRequest,
  CreateCategoryRequest,
  DashboardStats,
  DeleteAdminAuctionItemPathParameters,
  DeleteAdminCategoryPathParameters,
  DeleteAdminPromotionalBannerPathParameters,
  DeleteAdminUserPathParameters,
  ForceEndAdminAuctionItemPathParameters,
  GetAdminAuctionItemPathParameters,
  GetAdminAuctionItemsParams,
  GetAdminBidsParams,
  GetAdminCategoriesParams,
  GetAdminCategoryPathParameters,
  GetAdminEndedItemsParams,
  GetAdminPromotionalBannerPathParameters,
  GetAdminPromotionalBannersParams,
  GetAdminRevenueReportParams,
  GetAdminUserActivityReportParams,
  GetAdminUserPathParameters,
  GetAdminUsersParams,
  LoginRequest,
  LoginResponse,
  PaginatedAuctionItems,
  PaginatedBanners,
  PaginatedBids,
  PaginatedCategories,
  PaginatedUsers,
  PromotionalBanner,
  ReorderBannersRequest,
  RevenueReport,
  SuspendAdminUserPathParameters,
  SuspendUserRequest,
  UnsuspendAdminUserPathParameters,
  UpdateAdminAuctionItemPathParameters,
  UpdateAdminCategoryPathParameters,
  UpdateAdminPromotionalBannerPathParameters,
  UpdateAdminUserPathParameters,
  UpdateAuctionItemRequest,
  UpdateCategoryRequest,
  UpdateUserRequest,
  User,
  UserActivityReport
} from './models'
import { axiosMutator } from '../client';




export const getAdminProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<Admin>(
      {url: `/v1/admin/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminProfileQueryKey = () => {
    return [`/v1/admin/profile`] as const;
    }

    
export const getGetAdminProfileQueryOptions = <TData = Awaited<ReturnType<typeof getAdminProfile>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminProfile>>> = ({ signal }) => getAdminProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminProfile>>>
export type GetAdminProfileQueryError = unknown

export const useGetAdminProfile = <TData = Awaited<ReturnType<typeof getAdminProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProfile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const adminLogin = (
    loginRequest: LoginRequest,
 ) => {
      
      
      return axiosMutator<LoginResponse>(
      {url: `/v1/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest
    },
      );
    }
  


export const getAdminLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminLogin>>, TError,{data: LoginRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof adminLogin>>, TError,{data: LoginRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminLogin>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  adminLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdminLoginMutationResult = NonNullable<Awaited<ReturnType<typeof adminLogin>>>
    export type AdminLoginMutationBody = LoginRequest
    export type AdminLoginMutationError = unknown

    export const useAdminLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminLogin>>, TError,{data: LoginRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof adminLogin>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getAdminLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const adminLogout = (
    
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/logout`, method: 'POST'
    },
      );
    }
  


export const getAdminLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminLogout>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof adminLogout>>, TError,void, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminLogout>>, void> = () => {
          

          return  adminLogout()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdminLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof adminLogout>>>
    
    export type AdminLogoutMutationError = unknown

    export const useAdminLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminLogout>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof adminLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAdminLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getDashboardStats = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<DashboardStats>(
      {url: `/v1/admin/dashboard`, method: 'GET', signal
    },
      );
    }
  

export const getGetDashboardStatsQueryKey = () => {
    return [`/v1/admin/dashboard`] as const;
    }

    
export const getGetDashboardStatsQueryOptions = <TData = Awaited<ReturnType<typeof getDashboardStats>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardStats>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDashboardStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboardStats>>> = ({ signal }) => getDashboardStats(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDashboardStats>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDashboardStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getDashboardStats>>>
export type GetDashboardStatsQueryError = unknown

export const useGetDashboardStats = <TData = Awaited<ReturnType<typeof getDashboardStats>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboardStats>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDashboardStatsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminUsers = (
    params?: GetAdminUsersParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<PaginatedUsers>(
      {url: `/v1/admin/users`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminUsersQueryKey = (params?: GetAdminUsersParams,) => {
    return [`/v1/admin/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminUsersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUsers>>, TError = unknown>(params?: GetAdminUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUsers>>> = ({ signal }) => getAdminUsers(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUsers>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUsers>>>
export type GetAdminUsersQueryError = unknown

export const useGetAdminUsers = <TData = Awaited<ReturnType<typeof getAdminUsers>>, TError = unknown>(
 params?: GetAdminUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsers>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminUsersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminUser = (
    { id }: GetAdminUserPathParameters,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<User>(
      {url: `/v1/admin/users/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminUserQueryKey = ({ id }: GetAdminUserPathParameters,) => {
    return [`/v1/admin/users/${id}`] as const;
    }

    
export const getGetAdminUserQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUser>>, TError = unknown>({ id }: GetAdminUserPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUser>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUserQueryKey({ id });

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUser>>> = ({ signal }) => getAdminUser({ id }, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminUserQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUser>>>
export type GetAdminUserQueryError = unknown

export const useGetAdminUser = <TData = Awaited<ReturnType<typeof getAdminUser>>, TError = unknown>(
 { id }: GetAdminUserPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUser>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminUserQueryOptions({ id },options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateAdminUser = (
    { id }: UpdateAdminUserPathParameters,
    updateUserRequest: UpdateUserRequest,
 ) => {
      
      
      return axiosMutator<User>(
      {url: `/v1/admin/users/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequest
    },
      );
    }
  


export const getUpdateAdminUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminUser>>, TError,{pathParams: UpdateAdminUserPathParameters;data: UpdateUserRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminUser>>, TError,{pathParams: UpdateAdminUserPathParameters;data: UpdateUserRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminUser>>, {pathParams: UpdateAdminUserPathParameters;data: UpdateUserRequest}> = (props) => {
          const {pathParams,data} = props ?? {};

          return  updateAdminUser(pathParams,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminUser>>>
    export type UpdateAdminUserMutationBody = UpdateUserRequest
    export type UpdateAdminUserMutationError = unknown

    export const useUpdateAdminUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminUser>>, TError,{pathParams: UpdateAdminUserPathParameters;data: UpdateUserRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminUser>>,
        TError,
        {pathParams: UpdateAdminUserPathParameters;data: UpdateUserRequest},
        TContext
      > => {

      const mutationOptions = getUpdateAdminUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteAdminUser = (
    { id }: DeleteAdminUserPathParameters,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/users/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUser>>, TError,{pathParams: DeleteAdminUserPathParameters}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUser>>, TError,{pathParams: DeleteAdminUserPathParameters}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminUser>>, {pathParams: DeleteAdminUserPathParameters}> = (props) => {
          const {pathParams} = props ?? {};

          return  deleteAdminUser(pathParams,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminUser>>>
    
    export type DeleteAdminUserMutationError = unknown

    export const useDeleteAdminUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUser>>, TError,{pathParams: DeleteAdminUserPathParameters}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminUser>>,
        TError,
        {pathParams: DeleteAdminUserPathParameters},
        TContext
      > => {

      const mutationOptions = getDeleteAdminUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const suspendAdminUser = (
    { id }: SuspendAdminUserPathParameters,
    suspendUserRequest: SuspendUserRequest,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/users/${id}/suspend`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: suspendUserRequest
    },
      );
    }
  


export const getSuspendAdminUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof suspendAdminUser>>, TError,{pathParams: SuspendAdminUserPathParameters;data: SuspendUserRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof suspendAdminUser>>, TError,{pathParams: SuspendAdminUserPathParameters;data: SuspendUserRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof suspendAdminUser>>, {pathParams: SuspendAdminUserPathParameters;data: SuspendUserRequest}> = (props) => {
          const {pathParams,data} = props ?? {};

          return  suspendAdminUser(pathParams,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SuspendAdminUserMutationResult = NonNullable<Awaited<ReturnType<typeof suspendAdminUser>>>
    export type SuspendAdminUserMutationBody = SuspendUserRequest
    export type SuspendAdminUserMutationError = unknown

    export const useSuspendAdminUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof suspendAdminUser>>, TError,{pathParams: SuspendAdminUserPathParameters;data: SuspendUserRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof suspendAdminUser>>,
        TError,
        {pathParams: SuspendAdminUserPathParameters;data: SuspendUserRequest},
        TContext
      > => {

      const mutationOptions = getSuspendAdminUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const unsuspendAdminUser = (
    { id }: UnsuspendAdminUserPathParameters,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/users/${id}/unsuspend`, method: 'POST'
    },
      );
    }
  


export const getUnsuspendAdminUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unsuspendAdminUser>>, TError,{pathParams: UnsuspendAdminUserPathParameters}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof unsuspendAdminUser>>, TError,{pathParams: UnsuspendAdminUserPathParameters}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unsuspendAdminUser>>, {pathParams: UnsuspendAdminUserPathParameters}> = (props) => {
          const {pathParams} = props ?? {};

          return  unsuspendAdminUser(pathParams,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UnsuspendAdminUserMutationResult = NonNullable<Awaited<ReturnType<typeof unsuspendAdminUser>>>
    
    export type UnsuspendAdminUserMutationError = unknown

    export const useUnsuspendAdminUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unsuspendAdminUser>>, TError,{pathParams: UnsuspendAdminUserPathParameters}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof unsuspendAdminUser>>,
        TError,
        {pathParams: UnsuspendAdminUserPathParameters},
        TContext
      > => {

      const mutationOptions = getUnsuspendAdminUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAdminAuctionItems = (
    params?: GetAdminAuctionItemsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<PaginatedAuctionItems>(
      {url: `/v1/admin/auction-items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminAuctionItemsQueryKey = (params?: GetAdminAuctionItemsParams,) => {
    return [`/v1/admin/auction-items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminAuctionItemsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminAuctionItems>>, TError = unknown>(params?: GetAdminAuctionItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminAuctionItems>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminAuctionItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminAuctionItems>>> = ({ signal }) => getAdminAuctionItems(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminAuctionItems>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminAuctionItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminAuctionItems>>>
export type GetAdminAuctionItemsQueryError = unknown

export const useGetAdminAuctionItems = <TData = Awaited<ReturnType<typeof getAdminAuctionItems>>, TError = unknown>(
 params?: GetAdminAuctionItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminAuctionItems>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminAuctionItemsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createAdminAuctionItem = (
    createAuctionItemRequest: CreateAuctionItemRequest,
 ) => {
      
      
      return axiosMutator<AuctionItem>(
      {url: `/v1/admin/auction-items`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAuctionItemRequest
    },
      );
    }
  


export const getCreateAdminAuctionItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminAuctionItem>>, TError,{data: CreateAuctionItemRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAdminAuctionItem>>, TError,{data: CreateAuctionItemRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminAuctionItem>>, {data: CreateAuctionItemRequest}> = (props) => {
          const {data} = props ?? {};

          return  createAdminAuctionItem(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminAuctionItemMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminAuctionItem>>>
    export type CreateAdminAuctionItemMutationBody = CreateAuctionItemRequest
    export type CreateAdminAuctionItemMutationError = unknown

    export const useCreateAdminAuctionItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminAuctionItem>>, TError,{data: CreateAuctionItemRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createAdminAuctionItem>>,
        TError,
        {data: CreateAuctionItemRequest},
        TContext
      > => {

      const mutationOptions = getCreateAdminAuctionItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAdminAuctionItem = (
    { id }: GetAdminAuctionItemPathParameters,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<AuctionItem>(
      {url: `/v1/admin/auction-items/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminAuctionItemQueryKey = ({ id }: GetAdminAuctionItemPathParameters,) => {
    return [`/v1/admin/auction-items/${id}`] as const;
    }

    
export const getGetAdminAuctionItemQueryOptions = <TData = Awaited<ReturnType<typeof getAdminAuctionItem>>, TError = unknown>({ id }: GetAdminAuctionItemPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminAuctionItem>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminAuctionItemQueryKey({ id });

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminAuctionItem>>> = ({ signal }) => getAdminAuctionItem({ id }, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminAuctionItem>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminAuctionItemQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminAuctionItem>>>
export type GetAdminAuctionItemQueryError = unknown

export const useGetAdminAuctionItem = <TData = Awaited<ReturnType<typeof getAdminAuctionItem>>, TError = unknown>(
 { id }: GetAdminAuctionItemPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminAuctionItem>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminAuctionItemQueryOptions({ id },options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateAdminAuctionItem = (
    { id }: UpdateAdminAuctionItemPathParameters,
    updateAuctionItemRequest: UpdateAuctionItemRequest,
 ) => {
      
      
      return axiosMutator<AuctionItem>(
      {url: `/v1/admin/auction-items/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateAuctionItemRequest
    },
      );
    }
  


export const getUpdateAdminAuctionItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminAuctionItem>>, TError,{pathParams: UpdateAdminAuctionItemPathParameters;data: UpdateAuctionItemRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminAuctionItem>>, TError,{pathParams: UpdateAdminAuctionItemPathParameters;data: UpdateAuctionItemRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminAuctionItem>>, {pathParams: UpdateAdminAuctionItemPathParameters;data: UpdateAuctionItemRequest}> = (props) => {
          const {pathParams,data} = props ?? {};

          return  updateAdminAuctionItem(pathParams,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminAuctionItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminAuctionItem>>>
    export type UpdateAdminAuctionItemMutationBody = UpdateAuctionItemRequest
    export type UpdateAdminAuctionItemMutationError = unknown

    export const useUpdateAdminAuctionItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminAuctionItem>>, TError,{pathParams: UpdateAdminAuctionItemPathParameters;data: UpdateAuctionItemRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminAuctionItem>>,
        TError,
        {pathParams: UpdateAdminAuctionItemPathParameters;data: UpdateAuctionItemRequest},
        TContext
      > => {

      const mutationOptions = getUpdateAdminAuctionItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteAdminAuctionItem = (
    { id }: DeleteAdminAuctionItemPathParameters,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/auction-items/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminAuctionItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminAuctionItem>>, TError,{pathParams: DeleteAdminAuctionItemPathParameters}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminAuctionItem>>, TError,{pathParams: DeleteAdminAuctionItemPathParameters}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminAuctionItem>>, {pathParams: DeleteAdminAuctionItemPathParameters}> = (props) => {
          const {pathParams} = props ?? {};

          return  deleteAdminAuctionItem(pathParams,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminAuctionItemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminAuctionItem>>>
    
    export type DeleteAdminAuctionItemMutationError = unknown

    export const useDeleteAdminAuctionItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminAuctionItem>>, TError,{pathParams: DeleteAdminAuctionItemPathParameters}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminAuctionItem>>,
        TError,
        {pathParams: DeleteAdminAuctionItemPathParameters},
        TContext
      > => {

      const mutationOptions = getDeleteAdminAuctionItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const forceEndAdminAuctionItem = (
    { id }: ForceEndAdminAuctionItemPathParameters,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/auction-items/${id}/force-end`, method: 'POST'
    },
      );
    }
  


export const getForceEndAdminAuctionItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof forceEndAdminAuctionItem>>, TError,{pathParams: ForceEndAdminAuctionItemPathParameters}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof forceEndAdminAuctionItem>>, TError,{pathParams: ForceEndAdminAuctionItemPathParameters}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof forceEndAdminAuctionItem>>, {pathParams: ForceEndAdminAuctionItemPathParameters}> = (props) => {
          const {pathParams} = props ?? {};

          return  forceEndAdminAuctionItem(pathParams,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ForceEndAdminAuctionItemMutationResult = NonNullable<Awaited<ReturnType<typeof forceEndAdminAuctionItem>>>
    
    export type ForceEndAdminAuctionItemMutationError = unknown

    export const useForceEndAdminAuctionItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof forceEndAdminAuctionItem>>, TError,{pathParams: ForceEndAdminAuctionItemPathParameters}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof forceEndAdminAuctionItem>>,
        TError,
        {pathParams: ForceEndAdminAuctionItemPathParameters},
        TContext
      > => {

      const mutationOptions = getForceEndAdminAuctionItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAdminCategories = (
    params?: GetAdminCategoriesParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<PaginatedCategories>(
      {url: `/v1/admin/categories`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminCategoriesQueryKey = (params?: GetAdminCategoriesParams,) => {
    return [`/v1/admin/categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAdminCategories>>, TError = unknown>(params?: GetAdminCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategories>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminCategories>>> = ({ signal }) => getAdminCategories(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminCategories>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminCategories>>>
export type GetAdminCategoriesQueryError = unknown

export const useGetAdminCategories = <TData = Awaited<ReturnType<typeof getAdminCategories>>, TError = unknown>(
 params?: GetAdminCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategories>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createAdminCategory = (
    createCategoryRequest: CreateCategoryRequest,
 ) => {
      
      
      return axiosMutator<Category>(
      {url: `/v1/admin/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoryRequest
    },
      );
    }
  


export const getCreateAdminCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminCategory>>, TError,{data: CreateCategoryRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAdminCategory>>, TError,{data: CreateCategoryRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminCategory>>, {data: CreateCategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  createAdminCategory(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminCategory>>>
    export type CreateAdminCategoryMutationBody = CreateCategoryRequest
    export type CreateAdminCategoryMutationError = unknown

    export const useCreateAdminCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminCategory>>, TError,{data: CreateCategoryRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createAdminCategory>>,
        TError,
        {data: CreateCategoryRequest},
        TContext
      > => {

      const mutationOptions = getCreateAdminCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAdminCategory = (
    { id }: GetAdminCategoryPathParameters,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<Category>(
      {url: `/v1/admin/categories/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminCategoryQueryKey = ({ id }: GetAdminCategoryPathParameters,) => {
    return [`/v1/admin/categories/${id}`] as const;
    }

    
export const getGetAdminCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getAdminCategory>>, TError = unknown>({ id }: GetAdminCategoryPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategory>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminCategoryQueryKey({ id });

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminCategory>>> = ({ signal }) => getAdminCategory({ id }, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminCategory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminCategory>>>
export type GetAdminCategoryQueryError = unknown

export const useGetAdminCategory = <TData = Awaited<ReturnType<typeof getAdminCategory>>, TError = unknown>(
 { id }: GetAdminCategoryPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategory>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminCategoryQueryOptions({ id },options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateAdminCategory = (
    { id }: UpdateAdminCategoryPathParameters,
    updateCategoryRequest: UpdateCategoryRequest,
 ) => {
      
      
      return axiosMutator<Category>(
      {url: `/v1/admin/categories/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCategoryRequest
    },
      );
    }
  


export const getUpdateAdminCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminCategory>>, TError,{pathParams: UpdateAdminCategoryPathParameters;data: UpdateCategoryRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminCategory>>, TError,{pathParams: UpdateAdminCategoryPathParameters;data: UpdateCategoryRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminCategory>>, {pathParams: UpdateAdminCategoryPathParameters;data: UpdateCategoryRequest}> = (props) => {
          const {pathParams,data} = props ?? {};

          return  updateAdminCategory(pathParams,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminCategory>>>
    export type UpdateAdminCategoryMutationBody = UpdateCategoryRequest
    export type UpdateAdminCategoryMutationError = unknown

    export const useUpdateAdminCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminCategory>>, TError,{pathParams: UpdateAdminCategoryPathParameters;data: UpdateCategoryRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminCategory>>,
        TError,
        {pathParams: UpdateAdminCategoryPathParameters;data: UpdateCategoryRequest},
        TContext
      > => {

      const mutationOptions = getUpdateAdminCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteAdminCategory = (
    { id }: DeleteAdminCategoryPathParameters,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/categories/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminCategoryMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminCategory>>, TError,{pathParams: DeleteAdminCategoryPathParameters}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminCategory>>, TError,{pathParams: DeleteAdminCategoryPathParameters}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminCategory>>, {pathParams: DeleteAdminCategoryPathParameters}> = (props) => {
          const {pathParams} = props ?? {};

          return  deleteAdminCategory(pathParams,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminCategory>>>
    
    export type DeleteAdminCategoryMutationError = unknown

    export const useDeleteAdminCategory = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminCategory>>, TError,{pathParams: DeleteAdminCategoryPathParameters}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminCategory>>,
        TError,
        {pathParams: DeleteAdminCategoryPathParameters},
        TContext
      > => {

      const mutationOptions = getDeleteAdminCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAdminPromotionalBanners = (
    params?: GetAdminPromotionalBannersParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<PaginatedBanners>(
      {url: `/v1/admin/promotional-banners`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminPromotionalBannersQueryKey = (params?: GetAdminPromotionalBannersParams,) => {
    return [`/v1/admin/promotional-banners`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminPromotionalBannersQueryOptions = <TData = Awaited<ReturnType<typeof getAdminPromotionalBanners>>, TError = unknown>(params?: GetAdminPromotionalBannersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminPromotionalBanners>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminPromotionalBannersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminPromotionalBanners>>> = ({ signal }) => getAdminPromotionalBanners(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminPromotionalBanners>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminPromotionalBannersQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminPromotionalBanners>>>
export type GetAdminPromotionalBannersQueryError = unknown

export const useGetAdminPromotionalBanners = <TData = Awaited<ReturnType<typeof getAdminPromotionalBanners>>, TError = unknown>(
 params?: GetAdminPromotionalBannersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminPromotionalBanners>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminPromotionalBannersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createAdminPromotionalBanner = (
    createBannerRequest: CreateBannerRequest,
 ) => {
      
      
      return axiosMutator<PromotionalBanner>(
      {url: `/v1/admin/promotional-banners`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBannerRequest
    },
      );
    }
  


export const getCreateAdminPromotionalBannerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminPromotionalBanner>>, TError,{data: CreateBannerRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAdminPromotionalBanner>>, TError,{data: CreateBannerRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminPromotionalBanner>>, {data: CreateBannerRequest}> = (props) => {
          const {data} = props ?? {};

          return  createAdminPromotionalBanner(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminPromotionalBannerMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminPromotionalBanner>>>
    export type CreateAdminPromotionalBannerMutationBody = CreateBannerRequest
    export type CreateAdminPromotionalBannerMutationError = unknown

    export const useCreateAdminPromotionalBanner = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminPromotionalBanner>>, TError,{data: CreateBannerRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createAdminPromotionalBanner>>,
        TError,
        {data: CreateBannerRequest},
        TContext
      > => {

      const mutationOptions = getCreateAdminPromotionalBannerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAdminPromotionalBanner = (
    { id }: GetAdminPromotionalBannerPathParameters,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<PromotionalBanner>(
      {url: `/v1/admin/promotional-banners/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetAdminPromotionalBannerQueryKey = ({ id }: GetAdminPromotionalBannerPathParameters,) => {
    return [`/v1/admin/promotional-banners/${id}`] as const;
    }

    
export const getGetAdminPromotionalBannerQueryOptions = <TData = Awaited<ReturnType<typeof getAdminPromotionalBanner>>, TError = unknown>({ id }: GetAdminPromotionalBannerPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminPromotionalBanner>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminPromotionalBannerQueryKey({ id });

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminPromotionalBanner>>> = ({ signal }) => getAdminPromotionalBanner({ id }, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminPromotionalBanner>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminPromotionalBannerQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminPromotionalBanner>>>
export type GetAdminPromotionalBannerQueryError = unknown

export const useGetAdminPromotionalBanner = <TData = Awaited<ReturnType<typeof getAdminPromotionalBanner>>, TError = unknown>(
 { id }: GetAdminPromotionalBannerPathParameters, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminPromotionalBanner>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminPromotionalBannerQueryOptions({ id },options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const updateAdminPromotionalBanner = (
    { id }: UpdateAdminPromotionalBannerPathParameters,
    createBannerRequest: CreateBannerRequest,
 ) => {
      
      
      return axiosMutator<PromotionalBanner>(
      {url: `/v1/admin/promotional-banners/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createBannerRequest
    },
      );
    }
  


export const getUpdateAdminPromotionalBannerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminPromotionalBanner>>, TError,{pathParams: UpdateAdminPromotionalBannerPathParameters;data: CreateBannerRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminPromotionalBanner>>, TError,{pathParams: UpdateAdminPromotionalBannerPathParameters;data: CreateBannerRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminPromotionalBanner>>, {pathParams: UpdateAdminPromotionalBannerPathParameters;data: CreateBannerRequest}> = (props) => {
          const {pathParams,data} = props ?? {};

          return  updateAdminPromotionalBanner(pathParams,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminPromotionalBannerMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminPromotionalBanner>>>
    export type UpdateAdminPromotionalBannerMutationBody = CreateBannerRequest
    export type UpdateAdminPromotionalBannerMutationError = unknown

    export const useUpdateAdminPromotionalBanner = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminPromotionalBanner>>, TError,{pathParams: UpdateAdminPromotionalBannerPathParameters;data: CreateBannerRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminPromotionalBanner>>,
        TError,
        {pathParams: UpdateAdminPromotionalBannerPathParameters;data: CreateBannerRequest},
        TContext
      > => {

      const mutationOptions = getUpdateAdminPromotionalBannerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteAdminPromotionalBanner = (
    { id }: DeleteAdminPromotionalBannerPathParameters,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/promotional-banners/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteAdminPromotionalBannerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminPromotionalBanner>>, TError,{pathParams: DeleteAdminPromotionalBannerPathParameters}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminPromotionalBanner>>, TError,{pathParams: DeleteAdminPromotionalBannerPathParameters}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminPromotionalBanner>>, {pathParams: DeleteAdminPromotionalBannerPathParameters}> = (props) => {
          const {pathParams} = props ?? {};

          return  deleteAdminPromotionalBanner(pathParams,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminPromotionalBannerMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminPromotionalBanner>>>
    
    export type DeleteAdminPromotionalBannerMutationError = unknown

    export const useDeleteAdminPromotionalBanner = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminPromotionalBanner>>, TError,{pathParams: DeleteAdminPromotionalBannerPathParameters}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminPromotionalBanner>>,
        TError,
        {pathParams: DeleteAdminPromotionalBannerPathParameters},
        TContext
      > => {

      const mutationOptions = getDeleteAdminPromotionalBannerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const reorderAdminPromotionalBanners = (
    reorderBannersRequest: ReorderBannersRequest,
 ) => {
      
      
      return axiosMutator<void>(
      {url: `/v1/admin/promotional-banners/reorder`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reorderBannersRequest
    },
      );
    }
  


export const getReorderAdminPromotionalBannersMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reorderAdminPromotionalBanners>>, TError,{data: ReorderBannersRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof reorderAdminPromotionalBanners>>, TError,{data: ReorderBannersRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof reorderAdminPromotionalBanners>>, {data: ReorderBannersRequest}> = (props) => {
          const {data} = props ?? {};

          return  reorderAdminPromotionalBanners(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ReorderAdminPromotionalBannersMutationResult = NonNullable<Awaited<ReturnType<typeof reorderAdminPromotionalBanners>>>
    export type ReorderAdminPromotionalBannersMutationBody = ReorderBannersRequest
    export type ReorderAdminPromotionalBannersMutationError = unknown

    export const useReorderAdminPromotionalBanners = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof reorderAdminPromotionalBanners>>, TError,{data: ReorderBannersRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof reorderAdminPromotionalBanners>>,
        TError,
        {data: ReorderBannersRequest},
        TContext
      > => {

      const mutationOptions = getReorderAdminPromotionalBannersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getAdminBids = (
    params?: GetAdminBidsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<PaginatedBids>(
      {url: `/v1/admin/bids`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminBidsQueryKey = (params?: GetAdminBidsParams,) => {
    return [`/v1/admin/bids`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminBidsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminBids>>, TError = unknown>(params?: GetAdminBidsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminBids>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminBidsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminBids>>> = ({ signal }) => getAdminBids(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminBids>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminBidsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminBids>>>
export type GetAdminBidsQueryError = unknown

export const useGetAdminBids = <TData = Awaited<ReturnType<typeof getAdminBids>>, TError = unknown>(
 params?: GetAdminBidsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminBids>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminBidsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminRevenueReport = (
    params?: GetAdminRevenueReportParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<RevenueReport>(
      {url: `/v1/admin/reports/revenue`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminRevenueReportQueryKey = (params?: GetAdminRevenueReportParams,) => {
    return [`/v1/admin/reports/revenue`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminRevenueReportQueryOptions = <TData = Awaited<ReturnType<typeof getAdminRevenueReport>>, TError = unknown>(params?: GetAdminRevenueReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRevenueReport>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminRevenueReportQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminRevenueReport>>> = ({ signal }) => getAdminRevenueReport(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminRevenueReport>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminRevenueReportQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminRevenueReport>>>
export type GetAdminRevenueReportQueryError = unknown

export const useGetAdminRevenueReport = <TData = Awaited<ReturnType<typeof getAdminRevenueReport>>, TError = unknown>(
 params?: GetAdminRevenueReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminRevenueReport>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminRevenueReportQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminUserActivityReport = (
    params?: GetAdminUserActivityReportParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<UserActivityReport>(
      {url: `/v1/admin/reports/user-activity`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminUserActivityReportQueryKey = (params?: GetAdminUserActivityReportParams,) => {
    return [`/v1/admin/reports/user-activity`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminUserActivityReportQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUserActivityReport>>, TError = unknown>(params?: GetAdminUserActivityReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserActivityReport>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUserActivityReportQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUserActivityReport>>> = ({ signal }) => getAdminUserActivityReport(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUserActivityReport>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminUserActivityReportQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUserActivityReport>>>
export type GetAdminUserActivityReportQueryError = unknown

export const useGetAdminUserActivityReport = <TData = Awaited<ReturnType<typeof getAdminUserActivityReport>>, TError = unknown>(
 params?: GetAdminUserActivityReportParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserActivityReport>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminUserActivityReportQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getAdminEndedItems = (
    params?: GetAdminEndedItemsParams,
 signal?: AbortSignal
) => {
      
      
      return axiosMutator<PaginatedAuctionItems>(
      {url: `/v1/admin/ended-items`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAdminEndedItemsQueryKey = (params?: GetAdminEndedItemsParams,) => {
    return [`/v1/admin/ended-items`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAdminEndedItemsQueryOptions = <TData = Awaited<ReturnType<typeof getAdminEndedItems>>, TError = unknown>(params?: GetAdminEndedItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminEndedItems>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminEndedItemsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminEndedItems>>> = ({ signal }) => getAdminEndedItems(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminEndedItems>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAdminEndedItemsQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminEndedItems>>>
export type GetAdminEndedItemsQueryError = unknown

export const useGetAdminEndedItems = <TData = Awaited<ReturnType<typeof getAdminEndedItems>>, TError = unknown>(
 params?: GetAdminEndedItemsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminEndedItems>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAdminEndedItemsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




